{"version":3,"sources":["components/add_currency_button/add_currency_button.component.jsx","components/list_item/list_item.component.jsx","components/modal_add_currency/modal_add_currency.component.jsx","components/header/header.component.jsx","components/currency_card/currency_card.component.jsx","components/main/main.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["AddCurrencyButton","onClick","show","red","lime","styleString","className","ListItem","countryCode","currencyAbreviation","currencyFullName","chosenCurrencies","setChosenCurrencies","useState","isChosen","setIsChosen","newChosenCurrencies","filter","abr","src","ModalAddCurrency","goBackFunction","useContext","CurrencyListContext","currencyList","setCurrencyList","currency","added","map","newCurrencyList","curr","includes","updateTime","date","Date","getMonth","getDate","getFullYear","Header","setDate","useEffect","interval","setInterval","newDate","updateCurrencyList","clearInterval","CurrencyCard","currencySign","rate","CurrentCurrencyContext","currentCurrency","setCurrentCurrency","value","setValue","newValue","toFixed","type","onChange","event","target","createContext","Main","Provider","fetch","then","res","json","data","rates","App","CurrenciesData","showModal","setShowModal","document","title","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.22bb6f4d.chunk.js","sourcesContent":["import './add_currency_button.styles.scss'\n\nconst AddCurrencyButton = ({\n    onClick,\n    show,\n    red,\n    lime\n})=> {\n    if(!show){\n        return null\n    }\n\n    var styleString = 'add-currency'\n    if(red) {\n      styleString += ' red'\n    }\n    if(lime) {\n      styleString += ' lime'\n    }\n\n    return(\n        <button className={styleString}\n          onClick = {onClick}\n        >\n          Add Currency\n        </button>\n    )\n}\nexport default AddCurrencyButton","import { useState } from 'react'\nimport './list_item.styles.scss'\n\n// just the component that represents a list item in the modal\nconst ListItem = ({\n    countryCode,\n    currencyAbreviation,\n    currencyFullName,\n    chosenCurrencies,\n    setChosenCurrencies\n})=> {\n    // the state that stores if the list item is chosen or not \n    const [isChosen, setIsChosen] = useState(false)\n    return (\n        <div className={`list-item ${\n            (isChosen) ? 'is-chosen' : ''\n        }`}\n            onClick={() => {\n                if(isChosen) {\n                    setIsChosen(false)\n                    const newChosenCurrencies = chosenCurrencies.filter((abr) => \n                        abr != currencyAbreviation)\n                    setChosenCurrencies(newChosenCurrencies)\n                }\n                else {\n                    setIsChosen(true)\n                    setChosenCurrencies([...chosenCurrencies, currencyAbreviation])\n                }\n            }}\n        >\n            <img className='flag' src={`https://www.countryflags.io/${countryCode}/flat/64.png`}/>\n            <span>\n                {currencyAbreviation} - {currencyFullName}\n            </span>\n        </div>\n    )\n}\n\nexport default ListItem","import { useContext, useState } from 'react'\nimport { CurrencyListContext } from '../../App'\nimport AddCurrencyButton from '../add_currency_button/add_currency_button.component'\nimport ListItem from '../list_item/list_item.component'\nimport './modal_add_currency.styles.scss'\n\n// the Modal component which contains the list of all the not-added currencies\n// and renders on the top of the Main\nconst ModalAddCurrency = ({show, goBackFunction })=> {\n    // we need the currencyList in order to filter all the not-added currencies from it\n    const {currencyList, setCurrencyList} = useContext(CurrencyListContext)\n    // just a list of currency Abreviations that stores the selected ones.\n    const [chosenCurrencies, setChosenCurrencies] = useState([])\n\n    if(!show){\n        return null\n    }\n    \n    return (\n        <div className='modal'>\n            <div className='modal-content'>\n                <div className='currency-list'>\n                    {currencyList.filter((currency) => !currency.added)\n                    .map((currency) => (\n                        <ListItem \n                            countryCode={currency.countryCode}\n                            currencyAbreviation={currency.currencyAbreviation}\n                            currencyFullName={currency.currencyFullName}\n                            chosenCurrencies={chosenCurrencies}\n                            setChosenCurrencies={setChosenCurrencies}\n\n                        />\n                    ))\n                    }\n                </div>\n\n            </div>\n            {/* a new button is rendered because it contains a different functionality when clicked */}\n            <AddCurrencyButton \n                show={true}\n                red\n                // when clicked, all the selected currencies become added, the currency list is updated,\n                // and the goBackFunction is fired\n                onClick={() => {\n                    const newCurrencyList = currencyList.map((curr) => {\n                        if(chosenCurrencies.includes(curr.currencyAbreviation)) {\n                            return {...curr, added: true}\n                        }\n                        return curr\n                        \n                    })\n                    setCurrencyList(newCurrencyList)\n                    goBackFunction()\n                }}\n            />\n        </div>\n    )\n}\n\nexport default ModalAddCurrency","import { useContext, useEffect, useState } from \"react\"\nimport { CurrencyListContext, updateCurrencyList } from \"../../App\"\n\nconst updateTime = () => {\n    const date = new Date()\n    return `${date.getMonth() + 1}/${date.getDate()}/${date.getFullYear()}`\n}\n\n// the header component. it only contains a h1 and a paragraph as a html element\nconst Header = () => {\n\n    // the state used to store the displayed date \n    const [date, setDate] = useState(updateTime())\n    // I need the currencyList here in order to update if the date has changed\n    const {currencyList, setCurrencyList} = useContext(CurrencyListContext)\n\n    useEffect(() => {\n        // this interval fires at every second. After one second, the date is updated,\n        // if the new date differs from the new one, then a whole day has passed \n        // which means that there a updated rate on the API server, so we update the\n        // currency list. \n        const interval = setInterval(() => {\n            const newDate = updateTime()\n            if(newDate != date){\n                updateCurrencyList(currencyList, setCurrencyList)\n            }\n            setDate(newDate)\n        }, 1000)\n        // the callback when the component is unmounted which will clear the interval\n        return () => clearInterval(interval)\n    }, \n        // the function inside useEffect will be called everytime date is update,\n        // which actually happens inside that function, so the function will trigger\n        // itself recursively every one second.   \n        [date])\n\n    return (\n        <div>\n            <h1>Currency Exchange</h1>\n            <p>{date}</p>\n        </div>\n    )\n}\n\nexport default Header","import {useContext, useEffect, useState} from 'react'\nimport './currency_card.styles.scss'\nimport {CurrencyListContext} from '../../App'\nimport {CurrentCurrencyContext} from '../main/main.component'\n\n// the component which represent the card with the info about\n// the currency and the input field.\nconst CurrencyCard = (\n    {\n        countryCode, \n        currencySign, \n        currencyAbreviation, \n        currencyFullName,\n        rate\n    }\n) => \n{  \n    // we need the currentCurrency in every card in order to update respectively\n    // the exchange rate with the Base currency and to update the input value\n    const {currentCurrency, setCurrentCurrency} = useContext(CurrentCurrencyContext)\n    // the currencyList also contains the value inside the inputs of every cards,\n    // so we need the access to it in every card in order to update it in case we change\n    // the input in the Base Currency and after that we click on other card and change\n    // the Base currency.\n    const {currencyList, setCurrencyList} = useContext(CurrencyListContext)\n    // yet we need a separate value state, 'cause the input of the Base Currency \n    // behaves differently than the other inputs.\n    const [value, setValue] = useState(0)\n    // the function that return the value of the input differently if the currency is base\n    // or not.\n    const getValue = ()=> {\n        \n        if(currentCurrency.currencyAbreviation === currencyAbreviation){\n            // if we are in the Base Currency, we display the value as it is\n            return value\n        }\n        else {\n            // if we are not in the base, we calculate the value using the base currency rate\n            const val = (currentCurrency.value * currentCurrency.rate[currencyAbreviation])\n            // and display it only with 2 digits\n            return val.toFixed(2)\n        }\n    }\n\n    return( \n        <div \n            className={`card ${\n                (currentCurrency.currencyAbreviation === currencyAbreviation) \n                ? \n                'isSelected'\n                :\n                ''\n            }`}\n            // if we click on the card, the base currency is changed, \n            // so we set a new currentCurrency but we keep the value from the input field\n            onClick = {() => {\n                const newValue = (currentCurrency.value * currentCurrency.rate[currencyAbreviation])\n                setCurrentCurrency({\n                    ...currentCurrency,\n                    countryCode: countryCode, \n                    currencySign: currencySign, \n                    currencyAbreviation: currencyAbreviation, \n                    currencyFullName: currencyFullName,\n                    value: newValue,\n                    rate: rate\n                    \n                })\n                // we don't forget to truncate it to only 2 zecimals\n                setValue(newValue.toFixed(2))\n            }\n                \n                \n            }\n            \n        >\n            <div className='button-container'>\n                {/* the X button that set the flag \"added\" to false,\n                    which eliminates the card from the Main. */}\n                <button\n                    onClick={ () =>\n                        setCurrencyList(currencyList.map((curr) => {\n                            if(curr.currencyAbreviation == currencyAbreviation){\n                                return {...curr, added: false}\n                            }\n                            return curr\n                        }))\n                    }\n                >X</button>\n            </div>\n            <div className='row'>\n                <div className='col-30'>\n                    <img src = {`https://www.countryflags.io/${countryCode}/flat/64.png`}  className='flag'/>\n                    <p>{currencySign} </p>\n                </div>\n\n                <div className='col-70'>\n                    <input \n                        type='number' \n                        value={getValue()}  \n                        // on every change of the input, we set the currentCurrency to a new value, which\n                        // triggers the rerendering of all the other cards and their input values.\n                        onChange = {(event) => {\n                            setCurrentCurrency({\n                                ...currentCurrency,\n                                value: event.target.value\n                            })\n                            setValue(event.target.value)\n                        }}\n                    />\n                </div>\n\n            </div>\n\n            <div className='row'>\n                <div className='col-30' />\n                <div className='col-70 info'>\n                    <span>\n                    {currencyAbreviation} - {currencyFullName}\n                    </span>\n                    <span>\n                        1 {currentCurrency.currencyAbreviation} = {currentCurrency.rate[currencyAbreviation].toFixed(2)} {currencyAbreviation}\n                    </span>\n                </div>\n            </div>\n            \n        </div>\n    )\n}\n\nexport default CurrencyCard","\nimport Header from '../header/header.component'\nimport CurrencyCard from '../currency_card/currency_card.component'\nimport { CurrencyListContext} from '../../App'\nimport { useContext, useEffect, useState, createContext } from 'react'\nimport './main.styles.scss'\n\n// the context for storing the Base Currency- the one that was clicked\nexport const CurrentCurrencyContext = createContext(null)\n\n// the component that contains the header and the currency grid\nconst Main = () => {\n\n    // the need in the currencyList from its context is for setting the first \n    // currentCurrency, being by default the first element.\n    const {currencyList, setCurrencyList} = useContext(CurrencyListContext)\n    const [currentCurrency, setCurrentCurrency] = useState({...currencyList[0], value: 0})\n    \n    useEffect(() => {\n        setCurrentCurrency(currencyList[0])\n    }, [])\n\n    return (\n        <div className='main'>\n            {/* the header */}\n            <Header />\n            {/* the grid with the currency cards.\n                They all share the info of which currency is currenlty\n                the base currency, that's why the grid is wrapped in the context. */}\n            <CurrentCurrencyContext.Provider value={{currentCurrency, setCurrentCurrency}}>\n            <div className='currency-grid'>\n                {currencyList.filter((currency) => currency.added).map((currency) =>\n                \n                <CurrencyCard\n                    key = {currency.currencyAbreviation}\n\n                    countryCode = {currency.countryCode}\n                    currencyAbreviation = {currency.currencyAbreviation}\n                    currencyFullName = {currency.currencyFullName}\n                    currencySign = {currency.currencySign}\n                    value = {currency.value}\n                    rate = {currency.rate}\n                    \n                />\n                )}\n            </div>\n            </CurrentCurrencyContext.Provider>\n            \n        </div>\n    )\n}\n\nexport default Main","import './App.scss'\nimport AddCurrencyButton from './components/add_currency_button/add_currency_button.component'\nimport { useEffect, useState, createContext } from 'react'\nimport ModalAddCurrency from './components/modal_add_currency/modal_add_currency.component'\nimport CurrenciesData from './data/currencies.json'\nimport Main from './components/main/main.component'\n\n// the context that stores the list of the currencies\nexport const CurrencyListContext = createContext([])\n\n// the function that updates the currency list with the data from the API\nexport const updateCurrencyList = (currencyList, setCurrencyList) => {\n  // I don't see any reasons to hide the key, as the API is free\n  const apiKey = 'http://api.exchangeratesapi.io/v1/latest?access_key=cf96f408f3378112cdd0fbbcaec0a63c'\n  fetch(apiKey)\n  .then(res => res.json())\n  .then(data => {\n    setCurrencyList(currencyList.map((curr) => {\n      // if the currency is Euro, then the data from API contains the rates for it.\n      if(curr.currencyAbreviation === 'EUR'){\n        return {\n          ...curr,\n          rate: data.rates\n        }\n      }\n      else {\n        return curr\n      }\n    }))\n  })\n}\n\n// the main function, which also contains the main page, as it's the only one\n\nconst App = () => {\n  \n  // currencyList state represents the list of all currencies which are brought from \n  // the data/currencies.json. As the elements of the list contains only the main fields,\n  // I have to also add the value field, which will be used for storing the value in the \n  // CurrencyCard input fields, as they act dynamically and all of the cards depends on the\n  // base currency card- the CurrentCurrency. This state will be used for the CurrencyListContext,\n  // used for Provider.\n  const [currencyList, setCurrencyList] = useState(\n    CurrenciesData.map(\n      (curr) => {return {...curr, value: 0}}\n    )\n  )\n\n  // showModal is a flag that indicates whether the modal with not-added currencies is displayed or not.\n  const [showModal, setShowModal] = useState(false)\n\n  // when mounting, call updateCurrencyList in order to get the \"latest\" exchange rates, BUT ONLY FOR EURO,\n  // as the free version on the API allows the fetching only the rates for Euro. But even if the API\n  // gets to the paid plan, it's not hard to refactor the code to work properly. Mainly, the changes\n  // must be made only to the updateCurrencyList function.\n  useEffect(() => {\n    document.title = \"Currency Exchange\"\n    updateCurrencyList(currencyList, setCurrencyList)\n  }, [])\n\n  return (\n    <div className='body'>\n      {/* Both Main and ModalAddCurrency components depend on the CurrencyListContext, as it contains\n          elements with the flag added, which is true if the currency is chosen and appears in the Main; \n          if it's false, it appears in the Modal's list. */}\n      <CurrencyListContext.Provider value={{currencyList, setCurrencyList}}>\n        \n        <Main />\n        {/* The button sets the shoModal to true and, respectively, \"activates\" the display of the Modal.  */}\n        <AddCurrencyButton \n          show={!showModal}\n          onClick={()=>setShowModal(true)}\n          lime\n        />\n        <ModalAddCurrency \n          show={showModal}\n          goBackFunction={() => setShowModal(false)}\n        />\n      </CurrencyListContext.Provider>\n    </div>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}